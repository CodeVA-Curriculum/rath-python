import{S as e,i as t,s as n,A as s,j as a,m as o,o as r,p as c,q as i,v as p,r as h,w as l,M as u,e as d,t as f,k as g,c as k,a as m,g as y,d as w,n as v,b as E,G as $,f as b,H as T,J as P}from"../../chunks/vendor-15b4c14a.js";import{M as x,V as I}from"../../chunks/VideoModule-100b1a85.js";import{C as O}from"../../chunks/Callout-f7bcd01d.js";import{P as C}from"../../chunks/Prompt-6801d7f3.js";import{R as S}from"../../chunks/ReplitEmbed-fda7334b.js";import{b as D}from"../../chunks/paths-45dac81d.js";import{S as A,f as R}from"../../chunks/JackandBeanstalk-71af9cdf.js";/* empty css                                                         */function L(e){let t,n,s,a,o,r,c,i,p,h,l,u,$,P,x,I,O,C,S,D,A,R,L,N,M,H;return{c(){t=d("span"),n=f("The first step is to create the **function definition** area at the top of the code. Here are the steps:\n"),s=d("ol"),a=d("li"),o=f("The function definition section starts with the keyword "),r=d("code"),c=f("def"),i=f(" (short for "),p=d("em"),h=f("define"),l=f(")…"),u=g(),$=d("li"),P=f("…followed by the name of the function I’m creating (this is totally up to the coder, I chose "),x=d("code"),I=f("song"),O=f(" because it matches the purpose of the function)."),C=g(),S=d("li"),D=f("After the name, I need to add a set of parentheses (this is a Python "),A=d("strong"),R=f("syntax"),L=f(" rule, it’s not optional) and a "),N=d("strong"),M=f("colon"),H=f(" to end the line."),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var d=m(t);n=y(d,"The first step is to create the **function definition** area at the top of the code. Here are the steps:\n"),s=k(d,"OL",{});var f=m(s);a=k(f,"LI",{});var g=m(a);o=y(g,"The function definition section starts with the keyword "),r=k(g,"CODE",{});var E=m(r);c=y(E,"def"),E.forEach(w),i=y(g," (short for "),p=k(g,"EM",{});var b=m(p);h=y(b,"define"),b.forEach(w),l=y(g,")…"),g.forEach(w),u=v(f),$=k(f,"LI",{});var T=m($);P=y(T,"…followed by the name of the function I’m creating (this is totally up to the coder, I chose "),x=k(T,"CODE",{});var Y=m(x);I=y(Y,"song"),Y.forEach(w),O=y(T," because it matches the purpose of the function)."),T.forEach(w),C=v(f),S=k(f,"LI",{});var F=m(S);D=y(F,"After the name, I need to add a set of parentheses (this is a Python "),A=k(F,"STRONG",{});var j=m(A);R=y(j,"syntax"),j.forEach(w),L=y(F," rule, it’s not optional) and a "),N=k(F,"STRONG",{});var z=m(N);M=y(z,"colon"),z.forEach(w),H=y(F," to end the line."),F.forEach(w),f.forEach(w),d.forEach(w),this.h()},h(){E(t,"slot","text")},m(e,d){b(e,t,d),T(t,n),T(t,s),T(s,a),T(a,o),T(a,r),T(r,c),T(a,i),T(a,p),T(p,h),T(a,l),T(s,u),T(s,$),T($,P),T($,x),T(x,I),T($,O),T(s,C),T(s,S),T(S,D),T(S,A),T(A,R),T(S,L),T(S,N),T(N,M),T(S,H)},d(e){e&&w(t)}}}function N(e){let t,n;return{c(){t=d("span"),n=d("pre"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var s=m(t);n=k(s,"PRE",{class:!0}),m(n).forEach(w),s.forEach(w),this.h()},h(){E(n,"class","language-python"),E(t,"slot","code")},m(e,s){b(e,t,s),T(t,n),n.innerHTML='<code class="language-python"><span class="token comment"># new code! ------------</span>\n<span class="token keyword">def</span> <span class="token function">song</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># process code</span>\n    <span class="token comment"># goes here...</span>\n\n<span class="token comment"># old code ------------</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I\'m going to sing you a song!"</span><span class="token punctuation">)</span>\n\n<span class="token comment"># song lyrics</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is the song that doesn\'t end..."</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes it goes on and on my friend..."</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thanks for listening!"</span><span class="token punctuation">)</span></code>'},p:P,d(e){e&&w(t)}}}function M(e){let t,n,s,a,o,r,c,i,p,h,l;return{c(){t=d("span"),n=f("Next, I need to define the *process* that will go with the `song()` function. Any code indented beneath the function **definition** line will get mapped to the `song()` keyword.\n"),s=d("ol"),a=d("li"),o=f("First, I’ll add the two "),r=d("code"),c=f("print()"),i=f(" statements that comprise the song lyrics to the function definition."),p=g(),h=d("li"),l=f("Then, I’ll remove them from the “old” section of the program."),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var u=m(t);n=y(u,"Next, I need to define the *process* that will go with the `song()` function. Any code indented beneath the function **definition** line will get mapped to the `song()` keyword.\n"),s=k(u,"OL",{});var d=m(s);a=k(d,"LI",{});var f=m(a);o=y(f,"First, I’ll add the two "),r=k(f,"CODE",{});var g=m(r);c=y(g,"print()"),g.forEach(w),i=y(f," statements that comprise the song lyrics to the function definition."),f.forEach(w),p=v(d),h=k(d,"LI",{});var E=m(h);l=y(E,"Then, I’ll remove them from the “old” section of the program."),E.forEach(w),d.forEach(w),u.forEach(w),this.h()},h(){E(t,"slot","text")},m(e,u){b(e,t,u),T(t,n),T(t,s),T(s,a),T(a,o),T(a,r),T(r,c),T(a,i),T(s,p),T(s,h),T(h,l)},d(e){e&&w(t)}}}function H(e){let t,n;return{c(){t=d("span"),n=d("pre"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var s=m(t);n=k(s,"PRE",{class:!0}),m(n).forEach(w),s.forEach(w),this.h()},h(){E(n,"class","language-python"),E(t,"slot","code")},m(e,s){b(e,t,s),T(t,n),n.innerHTML='<code class="language-python"><span class="token keyword">def</span> <span class="token function">song</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># new code! ---------</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is the song that doesn\'t end..."</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes it goes on and on my friend..."</span><span class="token punctuation">)</span>\n\n<span class="token comment"># old code ------------</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I\'m going to sing you a song!"</span><span class="token punctuation">)</span>\n\n<span class="token comment"># the song lyrics *were* here</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thanks for listening!"</span><span class="token punctuation">)</span></code>'},p:P,d(e){e&&w(t)}}}function Y(e){let t,n,s,a,o,r,c,i,p,h,l,u,$,P,x,I,O,C,S,D,A,R,L,N,M,H;return{c(){t=d("span"),n=f("If you run code at this stage, you'll notice something interesting. The code indented below the function definition line *doesn't happen*. It's like our function definition code doesn't work anymore!\n"),s=d("p"),a=f("Never fear; this is by design. Now that I’ve "),o=d("em"),r=f("defined"),c=f(" the function, I need to "),i=d("em"),p=f("call"),h=f(" it in order to trigger its process."),l=g(),u=d("ol"),$=d("li"),P=f("First, I’ll find the spot where I’d like to trigger the "),x=d("code"),I=f("song()"),O=f(" function (right after the `print(“I’m going to sing…”) statement)"),C=g(),S=d("li"),D=f("To trigger (or "),A=d("strong"),R=f("call"),L=f(") the function, I need to type its name (in this case, "),N=d("code"),M=f("song()"),H=f(")"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var d=m(t);n=y(d,"If you run code at this stage, you'll notice something interesting. The code indented below the function definition line *doesn't happen*. It's like our function definition code doesn't work anymore!\n"),s=k(d,"P",{});var f=m(s);a=y(f,"Never fear; this is by design. Now that I’ve "),o=k(f,"EM",{});var g=m(o);r=y(g,"defined"),g.forEach(w),c=y(f," the function, I need to "),i=k(f,"EM",{});var E=m(i);p=y(E,"call"),E.forEach(w),h=y(f," it in order to trigger its process."),f.forEach(w),l=v(d),u=k(d,"OL",{});var b=m(u);$=k(b,"LI",{});var T=m($);P=y(T,"First, I’ll find the spot where I’d like to trigger the "),x=k(T,"CODE",{});var Y=m(x);I=y(Y,"song()"),Y.forEach(w),O=y(T," function (right after the `print(“I’m going to sing…”) statement)"),T.forEach(w),C=v(b),S=k(b,"LI",{});var F=m(S);D=y(F,"To trigger (or "),A=k(F,"STRONG",{});var j=m(A);R=y(j,"call"),j.forEach(w),L=y(F,") the function, I need to type its name (in this case, "),N=k(F,"CODE",{});var z=m(N);M=y(z,"song()"),z.forEach(w),H=y(F,")"),F.forEach(w),b.forEach(w),d.forEach(w),this.h()},h(){E(t,"slot","text")},m(e,d){b(e,t,d),T(t,n),T(t,s),T(s,a),T(s,o),T(o,r),T(s,c),T(s,i),T(i,p),T(s,h),T(t,l),T(t,u),T(u,$),T($,P),T($,x),T(x,I),T($,O),T(u,C),T(u,S),T(S,D),T(S,A),T(A,R),T(S,L),T(S,N),T(N,M),T(S,H)},d(e){e&&w(t)}}}function F(e){let t,n;return{c(){t=d("span"),n=d("pre"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var s=m(t);n=k(s,"PRE",{class:!0}),m(n).forEach(w),s.forEach(w),this.h()},h(){E(n,"class","language-python"),E(t,"slot","code")},m(e,s){b(e,t,s),T(t,n),n.innerHTML='<code class="language-python"><span class="token keyword">def</span> <span class="token function">song</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is the song that doesn\'t end..."</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes it goes on and on my friend..."</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I\'m going to sing you a song!"</span><span class="token punctuation">)</span>\n\nsong<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># new code! Activate the song() function</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thanks for listening!"</span><span class="token punctuation">)</span></code>'},p:P,d(e){e&&w(t)}}}function j(e){let t,n,s;return{c(){t=f("This video covers the basics of defining and using **functions** with Python. This technique is *really* important for creating interactive narratives. Use the button below to open up the [starter code](https://replit.com/@JonStapleton1/Blank-Python-Project), which you can use to code along with the video. Don't forget to *fork* the code before you try editing it yourself!\n"),n=d("a"),s=f("Starter Code"),this.h()},l(e){t=y(e,"This video covers the basics of defining and using **functions** with Python. This technique is *really* important for creating interactive narratives. Use the button below to open up the [starter code](https://replit.com/@JonStapleton1/Blank-Python-Project), which you can use to code along with the video. Don't forget to *fork* the code before you try editing it yourself!\n"),n=k(e,"A",{href:!0,class:!0});var a=m(n);s=y(a,"Starter Code"),a.forEach(w),this.h()},h(){E(n,"href","https://replit.com/@JonStapleton1/Blank-Python-Project"),E(n,"class","button is-fullwidth my-5")},m(e,a){b(e,t,a),b(e,n,a),T(n,s)},d(e){e&&w(t),e&&w(n)}}}function z(e){let t,n;return{c(){t=f("The program [linked here]() contains some function definitions, but only one function call. The program is incomplete; call the appropriate functions in the correct order so the program outputs the lyrics to [song](). **Fork** the code [linked here]() to get started. Your program should produce the output below when you are finished:\n"),n=d("pre"),this.h()},l(e){t=y(e,"The program [linked here]() contains some function definitions, but only one function call. The program is incomplete; call the appropriate functions in the correct order so the program outputs the lyrics to [song](). **Fork** the code [linked here]() to get started. Your program should produce the output below when you are finished:\n"),n=k(e,"PRE",{class:!0}),m(n).forEach(w),this.h()},h(){E(n,"class","language-undefined")},m(e,s){b(e,t,s),b(e,n,s),n.innerHTML='<code class="language-undefined">Hey Jude\ndon&#39;t make it bad. Take a sad song, and make it better\nRemember to let her into your heart, then you can start\nto make it better\nNa, na, na\nna-na-na-na\nna-na-na-na\nHey Jude</code>'},p:P,d(e){e&&w(t),e&&w(n)}}}function B(e){let t,n,s,a,o,r,c,i,p,h,l,u,$,P,x,I,O,C,S,D,A,R,L,N,M,H;return{c(){t=d("span"),n=f("First, you'll need to create a scene to start the story off. Check out the example.\n"),s=d("p"),a=f("Each “scene” function has a couple of different parts:"),o=g(),r=d("ol"),c=d("li"),i=f("A function definition line, where we need to name the scene"),p=g(),h=d("li"),l=f("A "),u=d("code"),$=f("print()"),P=f(" statement, where we describe what’s going on in the scene"),x=g(),I=d("li"),O=f("A "),C=d("code"),S=f("print()"),D=f(" statement that shows the reader what options they have for interacting with the story"),A=g(),R=d("li"),L=f("An "),N=d("code"),M=f("if"),H=f(" statement, with a section for each path out of the scene"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var d=m(t);n=y(d,"First, you'll need to create a scene to start the story off. Check out the example.\n"),s=k(d,"P",{});var f=m(s);a=y(f,"Each “scene” function has a couple of different parts:"),f.forEach(w),o=v(d),r=k(d,"OL",{});var g=m(r);c=k(g,"LI",{});var E=m(c);i=y(E,"A function definition line, where we need to name the scene"),E.forEach(w),p=v(g),h=k(g,"LI",{});var b=m(h);l=y(b,"A "),u=k(b,"CODE",{});var T=m(u);$=y(T,"print()"),T.forEach(w),P=y(b," statement, where we describe what’s going on in the scene"),b.forEach(w),x=v(g),I=k(g,"LI",{});var Y=m(I);O=y(Y,"A "),C=k(Y,"CODE",{});var F=m(C);S=y(F,"print()"),F.forEach(w),D=y(Y," statement that shows the reader what options they have for interacting with the story"),Y.forEach(w),A=v(g),R=k(g,"LI",{});var j=m(R);L=y(j,"An "),N=k(j,"CODE",{});var z=m(N);M=y(z,"if"),z.forEach(w),H=y(j," statement, with a section for each path out of the scene"),j.forEach(w),g.forEach(w),d.forEach(w),this.h()},h(){E(t,"slot","text")},m(e,d){b(e,t,d),T(t,n),T(t,s),T(s,a),T(t,o),T(t,r),T(r,c),T(c,i),T(r,p),T(r,h),T(h,l),T(h,u),T(u,$),T(h,P),T(r,x),T(r,I),T(I,O),T(I,C),T(C,S),T(I,D),T(r,A),T(r,R),T(R,L),T(R,N),T(N,M),T(R,H)},d(e){e&&w(t)}}}function J(e){let t,n;return{c(){t=d("span"),n=d("pre"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var s=m(t);n=k(s,"PRE",{class:!0}),m(n).forEach(w),s.forEach(w),this.h()},h(){E(n,"class","language-python"),E(t,"slot","code")},m(e,s){b(e,t,s),T(t,n),n.innerHTML='<code class="language-python"><span class="token keyword">def</span> <span class="token function">scene1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You find yourself in a dark, musty cave"</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Will you EXPLORE or DEPART?"</span><span class="token punctuation">)</span>\n    <span class="token comment"># check which path the user chose</span>\n    answer <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># get user input</span>\n    <span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string">"EXPLORE"</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You become lost in the dark"</span><span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> answer <span class="token operator">==</span> <span class="token string">"DEPART"</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You step out into the light"</span><span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"That\'s not an option"</span><span class="token punctuation">)</span></code>'},p:P,d(e){e&&w(t)}}}function W(e){let t,n,s,a,o,r,c,i,p,h,l,u,$,P,x,I,O,C,S,D,A,R,L,N,M,H,Y,F,j,z,B;return{c(){t=d("span"),n=f("The scene in the function called `scene1()` has three possible paths for the user to take:\n"),s=d("ol"),a=d("li"),o=f("EXPLORE the cave"),r=g(),c=d("li"),i=f("DEPART the cave"),p=g(),h=d("li"),l=d("code"),u=f('"That\'s not an option"'),$=f(", which will run if the reader types something other than "),P=d("code"),x=f('"EXPLORE"'),I=f(" or "),O=d("code"),C=f('"DEPART"'),S=f("."),D=g(),A=d("p"),R=f("Each of these paths will lead to different scenes–“EXPLORE” leads to “Scene 2” according to our flowchart, while “DEPART” leads to “Scene 3”. If the reader doesn’t select one of these two options, we can just restart “Scene 1” to give them another chance to answer."),L=g(),N=d("p"),M=f("Next, create new functions for "),H=d("code"),Y=f("scene2"),F=f(" and "),j=d("code"),z=f("scene3"),B=f("."),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var d=m(t);n=y(d,"The scene in the function called `scene1()` has three possible paths for the user to take:\n"),s=k(d,"OL",{});var f=m(s);a=k(f,"LI",{});var g=m(a);o=y(g,"EXPLORE the cave"),g.forEach(w),r=v(f),c=k(f,"LI",{});var E=m(c);i=y(E,"DEPART the cave"),E.forEach(w),p=v(f),h=k(f,"LI",{});var b=m(h);l=k(b,"CODE",{});var T=m(l);u=y(T,'"That\'s not an option"'),T.forEach(w),$=y(b,", which will run if the reader types something other than "),P=k(b,"CODE",{});var J=m(P);x=y(J,'"EXPLORE"'),J.forEach(w),I=y(b," or "),O=k(b,"CODE",{});var W=m(O);C=y(W,'"DEPART"'),W.forEach(w),S=y(b,"."),b.forEach(w),f.forEach(w),D=v(d),A=k(d,"P",{});var G=m(A);R=y(G,"Each of these paths will lead to different scenes–“EXPLORE” leads to “Scene 2” according to our flowchart, while “DEPART” leads to “Scene 3”. If the reader doesn’t select one of these two options, we can just restart “Scene 1” to give them another chance to answer."),G.forEach(w),L=v(d),N=k(d,"P",{});var X=m(N);M=y(X,"Next, create new functions for "),H=k(X,"CODE",{});var U=m(H);Y=y(U,"scene2"),U.forEach(w),F=y(X," and "),j=k(X,"CODE",{});var V=m(j);z=y(V,"scene3"),V.forEach(w),B=y(X,"."),X.forEach(w),d.forEach(w),this.h()},h(){E(t,"slot","text")},m(e,d){b(e,t,d),T(t,n),T(t,s),T(s,a),T(a,o),T(s,r),T(s,c),T(c,i),T(s,p),T(s,h),T(h,l),T(l,u),T(h,$),T(h,P),T(P,x),T(h,I),T(h,O),T(O,C),T(h,S),T(t,D),T(t,A),T(A,R),T(t,L),T(t,N),T(N,M),T(N,H),T(H,Y),T(N,F),T(N,j),T(j,z),T(N,B)},d(e){e&&w(t)}}}function G(e){let t,n;return{c(){t=d("span"),n=d("pre"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var s=m(t);n=k(s,"PRE",{class:!0}),m(n).forEach(w),s.forEach(w),this.h()},h(){E(n,"class","language-python"),E(t,"slot","code")},m(e,s){b(e,t,s),T(t,n),n.innerHTML='<code class="language-python"><span class="token keyword">def</span> <span class="token function">scene1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You find yourself..."</span><span class="token punctuation">)</span>\n    <span class="token comment"># collapsed to make room...</span>\n\n<span class="token keyword">def</span> <span class="token function">scene2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to scene 2!"</span><span class="token punctuation">)</span>\n    <span class="token comment"># no "if" statement yet...</span>\n\n<span class="token keyword">def</span> <span class="token function">scene3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to scene 3!"</span><span class="token punctuation">)</span>\n    <span class="token comment"># no "if" statement yet...</span></code>'},p:P,d(e){e&&w(t)}}}function X(e){let t,n,s,a,o,r,c,i,p,h,l,u,$,P,x,I,O,C,S,D,A,R,L,N,M,H,Y,F,j,z,B,J;return{c(){t=d("span"),n=f("Next, we will connect each path in the scene to another scene. Basically, we want to run the code for different scenes based on the choice the reader made in `scene1()`. \n"),s=d("p"),a=f("In "),o=d("code"),r=f("scene1()"),c=f(", we made three possible paths:"),i=g(),p=d("ol"),h=d("li"),l=d("code"),u=f('"EXPLORE"'),$=f(", which leads to "),P=d("code"),x=f("scene2()"),I=g(),O=d("li"),C=d("code"),S=f('"DEPART"'),D=f(" which leads to "),A=d("code"),R=f("scene3()"),L=g(),N=d("li"),M=d("code"),H=f('"That\'s not an option"'),Y=f(", which leads back to "),F=d("code"),j=f("scene1()"),z=g(),B=d("p"),J=f("To connect these paths to new scenes, call the function associated with the scene that should start given each input from the reader."),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var d=m(t);n=y(d,"Next, we will connect each path in the scene to another scene. Basically, we want to run the code for different scenes based on the choice the reader made in `scene1()`. \n"),s=k(d,"P",{});var f=m(s);a=y(f,"In "),o=k(f,"CODE",{});var g=m(o);r=y(g,"scene1()"),g.forEach(w),c=y(f,", we made three possible paths:"),f.forEach(w),i=v(d),p=k(d,"OL",{});var E=m(p);h=k(E,"LI",{});var b=m(h);l=k(b,"CODE",{});var T=m(l);u=y(T,'"EXPLORE"'),T.forEach(w),$=y(b,", which leads to "),P=k(b,"CODE",{});var W=m(P);x=y(W,"scene2()"),W.forEach(w),b.forEach(w),I=v(E),O=k(E,"LI",{});var G=m(O);C=k(G,"CODE",{});var X=m(C);S=y(X,'"DEPART"'),X.forEach(w),D=y(G," which leads to "),A=k(G,"CODE",{});var U=m(A);R=y(U,"scene3()"),U.forEach(w),G.forEach(w),L=v(E),N=k(E,"LI",{});var V=m(N);M=k(V,"CODE",{});var Q=m(M);H=y(Q,'"That\'s not an option"'),Q.forEach(w),Y=y(V,", which leads back to "),F=k(V,"CODE",{});var q=m(F);j=y(q,"scene1()"),q.forEach(w),V.forEach(w),E.forEach(w),z=v(d),B=k(d,"P",{});var K=m(B);J=y(K,"To connect these paths to new scenes, call the function associated with the scene that should start given each input from the reader."),K.forEach(w),d.forEach(w),this.h()},h(){E(t,"slot","text")},m(e,d){b(e,t,d),T(t,n),T(t,s),T(s,a),T(s,o),T(o,r),T(s,c),T(t,i),T(t,p),T(p,h),T(h,l),T(l,u),T(h,$),T(h,P),T(P,x),T(p,I),T(p,O),T(O,C),T(C,S),T(O,D),T(O,A),T(A,R),T(p,L),T(p,N),T(N,M),T(M,H),T(N,Y),T(N,F),T(F,j),T(t,z),T(t,B),T(B,J)},d(e){e&&w(t)}}}function U(e){let t,n;return{c(){t=d("span"),n=d("pre"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var s=m(t);n=k(s,"PRE",{class:!0}),m(n).forEach(w),s.forEach(w),this.h()},h(){E(n,"class","language-python"),E(t,"slot","code")},m(e,s){b(e,t,s),T(t,n),n.innerHTML='<code class="language-python"><span class="token keyword">def</span> <span class="token function">scene1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You find yourself in a dark, musty cave"</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Will you EXPLORE or DEPART?"</span><span class="token punctuation">)</span>\n    <span class="token comment"># check which path the user chose</span>\n    answer <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># get user input</span>\n    <span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string">"EXPLORE"</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You become lost in the dark"</span><span class="token punctuation">)</span>\n        scene2<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> answer <span class="token operator">==</span> <span class="token string">"DEPART"</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You step out into the light"</span><span class="token punctuation">)</span>\n        scene3<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"That\'s not an option"</span><span class="token punctuation">)</span>\n        scene1<span class="token punctuation">(</span><span class="token punctuation">)</span></code>'},p:P,d(e){e&&w(t)}}}function V(e){let t,n,s,a,o,r,c,i,p,h,l,u,$,P,x,I,O,C,S,D,A,R,L,N,M,H,Y;return{c(){t=d("span"),n=d("p"),s=f("Because "),a=d("code"),o=f("scene1()"),r=f(" leads to all the other scenes, we don’t need to include any other function calls. The "),c=d("code"),i=f("scene1()"),p=f(" call after all the function definitions starts sort of a chain reaction, where the process inside each function definition contains the calls to all subsequent scenes in the story."),h=g(),l=d("p"),u=f("While it’s not stricly necessary, it’s a good idea to organize your code with the "),$=d("strong"),P=f("functions"),x=f(" at the "),I=d("em"),O=f("top"),C=f(", along with any variables you might need, with the “main” portion of your program containing the the function "),S=d("strong"),D=f("calls"),A=g(),R=d("em"),L=f("below"),N=f(" them."),M=g(),H=d("p"),Y=f("When you use a lot of functions like this, your “main program” might be pretty short (even one line, like in the example)! That’s okay."),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var d=m(t);n=k(d,"P",{});var f=m(n);s=y(f,"Because "),a=k(f,"CODE",{});var g=m(a);o=y(g,"scene1()"),g.forEach(w),r=y(f," leads to all the other scenes, we don’t need to include any other function calls. The "),c=k(f,"CODE",{});var E=m(c);i=y(E,"scene1()"),E.forEach(w),p=y(f," call after all the function definitions starts sort of a chain reaction, where the process inside each function definition contains the calls to all subsequent scenes in the story."),f.forEach(w),h=v(d),l=k(d,"P",{});var b=m(l);u=y(b,"While it’s not stricly necessary, it’s a good idea to organize your code with the "),$=k(b,"STRONG",{});var T=m($);P=y(T,"functions"),T.forEach(w),x=y(b," at the "),I=k(b,"EM",{});var F=m(I);O=y(F,"top"),F.forEach(w),C=y(b,", along with any variables you might need, with the “main” portion of your program containing the the function "),S=k(b,"STRONG",{});var j=m(S);D=y(j,"calls"),j.forEach(w),A=v(b),R=k(b,"EM",{});var z=m(R);L=y(z,"below"),z.forEach(w),N=y(b," them."),b.forEach(w),M=v(d),H=k(d,"P",{});var B=m(H);Y=y(B,"When you use a lot of functions like this, your “main program” might be pretty short (even one line, like in the example)! That’s okay."),B.forEach(w),d.forEach(w),this.h()},h(){E(t,"slot","text")},m(e,d){b(e,t,d),T(t,n),T(n,s),T(n,a),T(a,o),T(n,r),T(n,c),T(c,i),T(n,p),T(t,h),T(t,l),T(l,u),T(l,$),T($,P),T(l,x),T(l,I),T(I,O),T(l,C),T(l,S),T(S,D),T(l,A),T(l,R),T(R,L),T(l,N),T(t,M),T(t,H),T(H,Y)},d(e){e&&w(t)}}}function Q(e){let t,n;return{c(){t=d("span"),n=d("pre"),this.h()},l(e){t=k(e,"SPAN",{slot:!0});var s=m(t);n=k(s,"PRE",{class:!0}),m(n).forEach(w),s.forEach(w),this.h()},h(){E(n,"class","language-python"),E(t,"slot","code")},m(e,s){b(e,t,s),T(t,n),n.innerHTML='<code class="language-python"><span class="token comment"># functions, collapsed to make room</span>\n<span class="token keyword">def</span> <span class="token function">scene1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You find yourself..."</span><span class="token punctuation">)</span>\n    <span class="token comment"># etc.</span>\n\n<span class="token keyword">def</span> <span class="token function">scene2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to scene 2!"</span><span class="token punctuation">)</span>\n    <span class="token comment"># etc.</span>\n\n<span class="token keyword">def</span> <span class="token function">scene3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to scene 3!"</span><span class="token punctuation">)</span>\n    <span class="token comment"># etc.</span>\n\n<span class="token comment"># main program -------</span>\nscene1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># activate scene 1</span></code>'},p:P,d(e){e&&w(t)}}}function q(e){let t,n,s;return{c(){t=f("This video covers how to use *functions* to organize an interactive narrative around *scenes*. You'll use this pattern a lot when you create your own interactive narratives. Use the button below to open up the [starter code](https://replit.com/@JonStapleton1/Blank-Python-Project), which you can use to code along with the video. Don't forget to *fork* the code before you try editing it yourself!\n"),n=d("a"),s=f("Starter Code"),this.h()},l(e){t=y(e,"This video covers how to use *functions* to organize an interactive narrative around *scenes*. You'll use this pattern a lot when you create your own interactive narratives. Use the button below to open up the [starter code](https://replit.com/@JonStapleton1/Blank-Python-Project), which you can use to code along with the video. Don't forget to *fork* the code before you try editing it yourself!\n"),n=k(e,"A",{href:!0,class:!0});var a=m(n);s=y(a,"Starter Code"),a.forEach(w),this.h()},h(){E(n,"href","https://replit.com/@JonStapleton1/Blank-Python-Project"),E(n,"class","button is-fullwidth my-5")},m(e,a){b(e,t,a),b(e,n,a),T(n,s)},d(e){e&&w(t),e&&w(n)}}}function K(e){let t,n,s,a,o,r,c,i,p,h,l,u,$,P,x,I,O,C,S,D,A,R,L,N,M,H,Y,F,j,z,B,J,W,G,X,U,V;return{c(){t=f("Experiment with the story embedded above (you can also access it [here](https://replit.com/@JonStapleton1/Interactive-Narrative-Example)). This story only has one ending, but each scene has two options to choose from. \n"),n=d("p"),s=f("After playing through the “story” once or twice, try creating a flowchart like the one of "),a=d("em"),o=f("Jack and the Beanstalk"),r=f(" referenced at the beginning of the module representing the events of the example story you just played through. You can make the flowchart however you wish, but here are some suggestions:"),c=g(),i=d("ul"),p=d("li"),h=f("Create the flowchart on a piece of paper. Draw four circles, and label them "),l=d("code"),u=f("scene1()"),$=f(", "),P=d("code"),x=f("scene2()"),I=f(", "),O=d("code"),C=f("scene3()"),S=f(", and “End”. Draw arrows between the different scenes to represent the different paths the reader might take through the story."),D=g(),A=d("li"),R=f("Create the flowchart using "),L=d("a"),N=f("Google Drawings"),M=f(". Click "),H=d("a"),Y=f("this link"),F=f(", and log into your Google account if prompted. Use the shapes tool to create four shapes. Use a text box to label them "),j=d("code"),z=f("scene1()"),B=f(", "),J=d("code"),W=f("scene2()"),G=f(", "),X=d("code"),U=f("scene3()"),V=f(", and “End”. Then, use the connector tool to draw arrows between the scenes to represent the different paths the reader might take through the story."),this.h()},l(e){t=y(e,"Experiment with the story embedded above (you can also access it [here](https://replit.com/@JonStapleton1/Interactive-Narrative-Example)). This story only has one ending, but each scene has two options to choose from. \n"),n=k(e,"P",{});var d=m(n);s=y(d,"After playing through the “story” once or twice, try creating a flowchart like the one of "),a=k(d,"EM",{});var f=m(a);o=y(f,"Jack and the Beanstalk"),f.forEach(w),r=y(d," referenced at the beginning of the module representing the events of the example story you just played through. You can make the flowchart however you wish, but here are some suggestions:"),d.forEach(w),c=v(e),i=k(e,"UL",{});var g=m(i);p=k(g,"LI",{});var E=m(p);h=y(E,"Create the flowchart on a piece of paper. Draw four circles, and label them "),l=k(E,"CODE",{});var b=m(l);u=y(b,"scene1()"),b.forEach(w),$=y(E,", "),P=k(E,"CODE",{});var T=m(P);x=y(T,"scene2()"),T.forEach(w),I=y(E,", "),O=k(E,"CODE",{});var Q=m(O);C=y(Q,"scene3()"),Q.forEach(w),S=y(E,", and “End”. Draw arrows between the different scenes to represent the different paths the reader might take through the story."),E.forEach(w),D=v(g),A=k(g,"LI",{});var q=m(A);R=y(q,"Create the flowchart using "),L=k(q,"A",{href:!0,rel:!0});var K=m(L);N=y(K,"Google Drawings"),K.forEach(w),M=y(q,". Click "),H=k(q,"A",{href:!0,rel:!0});var _=m(H);Y=y(_,"this link"),_.forEach(w),F=y(q,", and log into your Google account if prompted. Use the shapes tool to create four shapes. Use a text box to label them "),j=k(q,"CODE",{});var Z=m(j);z=y(Z,"scene1()"),Z.forEach(w),B=y(q,", "),J=k(q,"CODE",{});var ee=m(J);W=y(ee,"scene2()"),ee.forEach(w),G=y(q,", "),X=k(q,"CODE",{});var te=m(X);U=y(te,"scene3()"),te.forEach(w),V=y(q,", and “End”. Then, use the connector tool to draw arrows between the scenes to represent the different paths the reader might take through the story."),q.forEach(w),g.forEach(w),this.h()},h(){E(L,"href","https://docs.google.com/drawings/create?usp=direct_url"),E(L,"rel","nofollow"),E(H,"href","https://docs.google.com/drawings/create?usp=direct_url"),E(H,"rel","nofollow")},m(e,d){b(e,t,d),b(e,n,d),T(n,s),T(n,a),T(a,o),T(n,r),b(e,c,d),b(e,i,d),T(i,p),T(p,h),T(p,l),T(l,u),T(p,$),T(p,P),T(P,x),T(p,I),T(p,O),T(O,C),T(p,S),T(i,D),T(i,A),T(A,R),T(A,L),T(L,N),T(A,M),T(A,H),T(H,Y),T(A,F),T(A,j),T(j,z),T(A,B),T(A,J),T(J,W),T(A,G),T(A,X),T(X,U),T(A,V)},d(e){e&&w(t),e&&w(n),e&&w(c),e&&w(i)}}}function _(e){let t,n,s,a,o,r,c,i,p,h,l,u,$,P,x,I;return{c(){t=f("Open the [starter code]() at [this link](). The story written here has four scenes, but the program as written only uses three of them. Change the `scene1()`, `scene2()`, or `scene3()` functions so one of the first three scenes leads to the fourth scene. You can use the comments in the starter code as a guide.\n"),n=d("p"),s=d("em"),a=f("Hint: This program is a lot longer than other ones you’ve used before. Check out lines 18-21 and lines 39-41 as a starting point."),o=g(),r=d("p"),c=f("Click the button below to check out the "),i=d("a"),p=f("starter code"),h=f("! Remember to "),l=d("strong"),u=f("fork"),$=f(" the code so you can edit it under your own "),P=d("a"),x=f("Repl.it"),I=f(" account."),this.h()},l(e){t=y(e,"Open the [starter code]() at [this link](). The story written here has four scenes, but the program as written only uses three of them. Change the `scene1()`, `scene2()`, or `scene3()` functions so one of the first three scenes leads to the fourth scene. You can use the comments in the starter code as a guide.\n"),n=k(e,"P",{});var d=m(n);s=k(d,"EM",{});var f=m(s);a=y(f,"Hint: This program is a lot longer than other ones you’ve used before. Check out lines 18-21 and lines 39-41 as a starting point."),f.forEach(w),d.forEach(w),o=v(e),r=k(e,"P",{});var g=m(r);c=y(g,"Click the button below to check out the "),i=k(g,"A",{href:!0,rel:!0});var E=m(i);p=y(E,"starter code"),E.forEach(w),h=y(g,"! Remember to "),l=k(g,"STRONG",{});var b=m(l);u=y(b,"fork"),b.forEach(w),$=y(g," the code so you can edit it under your own "),P=k(g,"A",{href:!0,rel:!0});var T=m(P);x=y(T,"Repl.it"),T.forEach(w),I=y(g," account."),g.forEach(w),this.h()},h(){E(i,"href","https://replit.com/@JonStapleton1/Module-4-Mild-Starter-Code"),E(i,"rel","nofollow"),E(P,"href","https://replit.com/~"),E(P,"rel","nofollow")},m(e,d){b(e,t,d),b(e,n,d),T(n,s),T(s,a),b(e,o,d),b(e,r,d),T(r,c),T(r,i),T(i,p),T(r,h),T(r,l),T(l,u),T(r,$),T(r,P),T(P,x),T(r,I)},d(e){e&&w(t),e&&w(n),e&&w(o),e&&w(r)}}}function Z(e){let t,n,s,a,o,r,c,i,p,h,l,u;return{c(){t=f('Open the [starter code]() at [this link](). The story written here has four scenes, but one of them does not contain any code! Add a description and `if` statement to the "empty" scene such that it calls two of the other three functions associated with the other three scenes in the story (`scene1()`, `scene2()`, `scene3()`). Use the other function definitions in the starter code as a model.\n'),n=d("p"),s=f("Click the button below to check out the "),a=d("a"),o=f("starter code"),r=f("! Remember to "),c=d("strong"),i=f("fork"),p=f(" the code so you can edit it under your own "),h=d("a"),l=f("Repl.it"),u=f(" account."),this.h()},l(e){t=y(e,'Open the [starter code]() at [this link](). The story written here has four scenes, but one of them does not contain any code! Add a description and `if` statement to the "empty" scene such that it calls two of the other three functions associated with the other three scenes in the story (`scene1()`, `scene2()`, `scene3()`). Use the other function definitions in the starter code as a model.\n'),n=k(e,"P",{});var d=m(n);s=y(d,"Click the button below to check out the "),a=k(d,"A",{href:!0,rel:!0});var f=m(a);o=y(f,"starter code"),f.forEach(w),r=y(d,"! Remember to "),c=k(d,"STRONG",{});var g=m(c);i=y(g,"fork"),g.forEach(w),p=y(d," the code so you can edit it under your own "),h=k(d,"A",{href:!0,rel:!0});var v=m(h);l=y(v,"Repl.it"),v.forEach(w),u=y(d," account."),d.forEach(w),this.h()},h(){E(a,"href","https://replit.com/@JonStapleton1/Module-4-Medium-Starter-Code"),E(a,"rel","nofollow"),E(h,"href","https://replit.com/~"),E(h,"rel","nofollow")},m(e,d){b(e,t,d),b(e,n,d),T(n,s),T(n,a),T(a,o),T(n,r),T(n,c),T(c,i),T(n,p),T(n,h),T(h,l),T(n,u)},d(e){e&&w(t),e&&w(n)}}}function ee(e){let t,n,s,a,o,r,c,i,p,h,l,u;return{c(){t=f("This story contains `if` statements that connect the scenes together, but the scenes don't have any descriptions! Replace the filler text in the `print()` statements with descriptions that tell a story. Make sure the descriptions make sense together! Edit the `if` statements as needed to connect your story in a way that weaves a narrative as necessary.\n"),n=d("p"),s=f("Click the button below to check out the "),a=d("a"),o=f("starter code"),r=f("! Remember to "),c=d("strong"),i=f("fork"),p=f(" the code so you can edit it under your own "),h=d("a"),l=f("Repl.it"),u=f(" account."),this.h()},l(e){t=y(e,"This story contains `if` statements that connect the scenes together, but the scenes don't have any descriptions! Replace the filler text in the `print()` statements with descriptions that tell a story. Make sure the descriptions make sense together! Edit the `if` statements as needed to connect your story in a way that weaves a narrative as necessary.\n"),n=k(e,"P",{});var d=m(n);s=y(d,"Click the button below to check out the "),a=k(d,"A",{href:!0,rel:!0});var f=m(a);o=y(f,"starter code"),f.forEach(w),r=y(d,"! Remember to "),c=k(d,"STRONG",{});var g=m(c);i=y(g,"fork"),g.forEach(w),p=y(d," the code so you can edit it under your own "),h=k(d,"A",{href:!0,rel:!0});var v=m(h);l=y(v,"Repl.it"),v.forEach(w),u=y(d," account."),d.forEach(w),this.h()},h(){E(a,"href","https://replit.com/@JonStapleton1/Module-4-Spicy-Starter-Code"),E(a,"rel","nofollow"),E(h,"href","https://replit.com/~"),E(h,"rel","nofollow")},m(e,d){b(e,t,d),b(e,n,d),T(n,s),T(n,a),T(a,o),T(n,r),T(n,c),T(c,i),T(n,p),T(n,h),T(h,l),T(n,u)},d(e){e&&w(t),e&&w(n)}}}function te(e){let t,n,s,c,i,u,P,x,te,ne,se,ae,oe,re,ce,ie,pe,he,le,ue,de,fe,ge,ke,me,ye,we,ve,Ee,$e,be,Te,Pe,xe,Ie,Oe,Ce,Se,De,Ae,Re,Le,Ne,Me,He,Ye,Fe,je,ze,Be,Je,We,Ge,Xe,Ue,Ve,Qe,qe,Ke,_e,Ze,et,tt,nt,st,at,ot,rt,ct,it,pt,ht,lt,ut,dt,ft,gt,kt,mt,yt,wt,vt,Et,$t,bt,Tt,Pt,xt,It,Ot,Ct,St,Dt,At,Rt,Lt,Nt,Mt,Ht,Yt,Ft,jt,zt,Bt,Jt,Wt,Gt,Xt,Ut,Vt,Qt,qt,Kt,_t,Zt,en,tn,nn,sn,an,on,rn,cn,pn,hn,ln,un,dn,fn,gn,kn,mn,yn,wn,vn,En,$n,bn,Tn,Pn,xn,In,On,Cn,Sn,Dn,An,Rn,Ln,Nn,Mn,Hn,Yn,Fn,jn,zn,Bn,Jn,Wn,Gn,Xn,Un,Vn,Qn,qn,Kn,_n,Zn,es,ts,ns,ss,as,os,rs,cs,is,ps,hs,ls,us,ds,fs,gs,ks,ms,ys,ws,vs,Es,$s,bs,Ts,Ps,xs,Is,Os,Cs,Ss,Ds,As,Rs,Ls,Ns,Ms,Hs,Ys,Fs,js,zs,Bs,Js,Ws,Gs,Xs,Us,Vs,Qs,qs,Ks,_s,Zs,ea,ta,na,sa,aa,oa,ra,ca,ia,pa,ha,la,ua,da,fa,ga,ka,ma,ya,wa,va,Ea,$a,ba,Ta,Pa,xa,Ia,Oa,Ca,Sa,Da,Aa,Ra,La,Na,Ma,Ha,Ya;return Ft=new A({props:{title:"1: Create Function Definition",$$slots:{code:[N],text:[L]},$$scope:{ctx:e}}}),zt=new A({props:{title:"2: Write the Function Process",$$slots:{code:[H],text:[M]},$$scope:{ctx:e}}}),Jt=new A({props:{title:"3: Activate the Function",$$slots:{code:[F],text:[Y]},$$scope:{ctx:e}}}),un=new I({props:{title:"Functions Basics",video:"https://www.loom.com/embed/426328321fd642f8bd9ad0ed4e43d47d",$$slots:{default:[j]},$$scope:{ctx:e}}}),fn=new O({props:{title:"Basic Function Experiments",$$slots:{default:[z]},$$scope:{ctx:e}}}),Vn=new A({props:{title:"1: Create the First Scene",$$slots:{code:[J],text:[B]},$$scope:{ctx:e}}}),qn=new A({props:{title:"2: Create Destinations",$$slots:{code:[G],text:[W]},$$scope:{ctx:e}}}),_n=new A({props:{title:"3: Create Connections",$$slots:{code:[U],text:[X]},$$scope:{ctx:e}}}),es=new A({props:{title:"4: Activate the First Scene",$$slots:{code:[Q],text:[V]},$$scope:{ctx:e}}}),bs=new S({props:{url:"https://replit.com/@JonStapleton1/Interactive-Narrative-Example"}}),Ps=new I({props:{title:"Functions as Scenes",video:"https://www.loom.com/embed/45d46318b0f24ce1b60866ad5a66d8a4",$$slots:{default:[q]},$$scope:{ctx:e}}}),Is=new O({props:{title:"Functions as Scenes Experiments",$$slots:{default:[K]},$$scope:{ctx:e}}}),As=new C({props:{title:"Mild: Name",footerLink:"https://replit.com/@JonStapleton1/Module-4-Mild-Starter-Code",spice:"mild",$$slots:{default:[_]},$$scope:{ctx:e}}}),Ls=new C({props:{title:"Medium: Name",footerLink:"https://replit.com/@JonStapleton1/Module-4-Medium-Starter-Code",spice:"medium",$$slots:{default:[Z]},$$scope:{ctx:e}}}),Ms=new C({props:{title:"Spicy: Name",footerLink:"https://replit.com/@JonStapleton1/Module-4-Spicy-Starter-Code",spice:"spicy",$$slots:{default:[ee]},$$scope:{ctx:e}}}),{c(){t=d("h1"),n=f("Backstory"),s=g(),c=d("p"),i=f("At this point, you know a lot about how to create interactive narratives. You may have even tried to create interactive stories using just "),u=d("code"),P=f("if"),x=f(" statements, variables, and "),te=d("code"),ne=f("input()"),se=f(", which is great! It’s totally possible to create some amazing stories using just those simple tools. However, you might notice that things get pretty complicated pretty quickly. Consider the program below:"),ae=g(),oe=d("pre"),re=g(),ce=d("p"),ie=f("This is a pretty short story; it barely rises to the level of an interactive narrative at all! The problem is, if we try to add more to the story, the program gets pretty difficult to read and make changes to. For example, we might want to have the reader make another choice after they find the trap door. To accomplish this, you’d have to add another "),pe=d("code"),he=f("if"),le=f(" statement to the "),ue=d("code"),de=f('"EXPLORE"'),fe=f(" path:"),ge=g(),ke=d("pre"),me=g(),ye=d("p"),we=f("By nesting the "),ve=d("code"),Ee=f("if"),$e=f(" statements, we can create longer “branches” in the story. The problem is, the more nested "),be=d("code"),Te=f("if"),Pe=f(" statements we add, the more complicated the code becomes! We will eventually end up with a “diagonal” code pattern:"),xe=g(),Ie=d("pre"),Oe=g(),Ce=d("p"),Se=f("This sort of “diagonal” code is okay for beginners, but unless we figure out a different way to organize the code that makes up the story things will get too complicated and difficult to manage as we add to the story. Not to mention that nested "),De=d("code"),Ae=f("if"),Re=f(" statements are a little confusing to read!"),Le=g(),Ne=d("p"),Me=f("This module is about "),He=d("strong"),Ye=f("functions"),Fe=f(". We will use functions to solve the problem of nested "),je=d("code"),ze=f("if"),Be=f(" statements in our interactive narratives. By creating functions, we can organize our story into "),Je=d("em"),We=f("scenes"),Ge=f(", allowing us to freely add new parts to the story without having to create many nested "),Xe=d("code"),Ue=f("if"),Ve=f(" statements. This is the last coding concept you will need to learn in order to make interactive narratives with Python!"),Qe=g(),qe=d("h1"),Ke=f("Function Basics"),_e=g(),Ze=d("p"),et=d("strong"),tt=f("Functions"),nt=f(" are really important in programming; they are "),st=d("em"),at=f("power-words"),ot=f(" that trigger a process. You’ve already been using some "),rt=d("strong"),ct=f("functions"),it=f(" in your programs; "),pt=d("code"),ht=f("print()"),lt=f(" is a function that triggers the process of showing text on the console, and "),ut=d("code"),dt=f("input()"),ft=f(" is a function that triggers the process of pausing and waiting for the user to type something before continuing with the program."),gt=g(),kt=d("p"),mt=f("You can use Python to "),yt=d("strong"),wt=f("define"),vt=f(" your own "),Et=d("strong"),$t=f("functions"),bt=f(" instead of just using the ones built into the language. You can use functions to organize your code into "),Tt=d("em"),Pt=f("processes"),xt=f(" that you can trigger at different points in your program. There are just a couple of steps to do. Consider this program:"),It=g(),Ot=d("pre"),Ct=g(),St=d("p"),Dt=f("To demonstrate how "),At=d("strong"),Rt=f("functions"),Lt=f(" work, I’m going to "),Nt=d("em"),Mt=f("refactor"),Ht=f(" this code so the lines corresponding to the song lyrics are organized into a function. Here’s how that works:"),Yt=g(),a(Ft.$$.fragment),jt=g(),a(zt.$$.fragment),Bt=g(),a(Jt.$$.fragment),Wt=g(),Gt=d("h2"),Xt=f("Why Functions?"),Ut=g(),Vt=d("p"),Qt=f("You might be asking yourself–“Why would I add functions to my code? It seems like a needlessly complicated addition”. There are a lot of benefits to adding functions that might not be clear right away; the most obvious one is that we can "),qt=d("em"),Kt=f("call"),_t=f(" functions as many times as we need to "),Zt=d("em"),en=f("without"),tn=f(" rewriting the function definition. So if I wanted to repeat the "),nn=d("code"),sn=f("song()"),an=f(" code, I could do it by simply calling the "),on=d("code"),rn=f("song()"),cn=f(" function a few more times:"),pn=g(),hn=d("pre"),ln=g(),a(un.$$.fragment),dn=g(),a(fn.$$.fragment),gn=g(),kn=d("h1"),mn=f("Using Functions for Scenes"),yn=g(),wn=d("p"),vn=f("So how could functions help with organizing interactive narratives? There are a lot of possible ways to use functions (they’re a pretty flexible programming tool), but one way is to create "),En=d("em"),$n=f("scenes"),bn=f(" within functions, and then to chain those scenes together to weave the interactive narrative. “Scenes” aren’t Python concepts–they are a method of organization, a way of thinking about how to break down the problem of telling stories that have multiple paths toward multiple endings. A scene has:"),Tn=g(),Pn=d("ul"),xn=d("li"),In=f("A description, where the reader learns about what is happening in that part of the story and what options they have for interacting with the narrative"),On=g(),Cn=d("li"),Sn=f("A choice, where the reader types in a command to interact with the story"),Dn=g(),An=d("li"),Rn=f("Two or more paths that lead to other scenes"),Ln=g(),Nn=d("p"),Mn=f("You can think about an interactive narrative not as a book with different endings that you read front-to-back, but as a network of “scenes” connected together. For example, here’s a network of scenes represented by a flowchart for the story of "),Hn=d("em"),Yn=f("Jack and the Beanstalk"),Fn=f(":"),jn=g(),zn=d("div"),Bn=d("img"),Wn=g(),Gn=d("p"),Xn=f("To create this story using Python, you could make each “scene” its own function and connect them together through the reader’s choices. Here’s an example:"),Un=g(),a(Vn.$$.fragment),Qn=g(),a(qn.$$.fragment),Kn=g(),a(_n.$$.fragment),Zn=g(),a(es.$$.fragment),ts=g(),ns=d("p"),ss=f("To expand the story, all you have to do is add "),as=d("code"),os=f("if"),rs=f(" statements to "),cs=d("code"),is=f("scene2()"),ps=f(" and "),hs=d("code"),ls=f("scene3()"),us=f(", along with more scenes to connect to. I’ve expanded the story I started above into a more-or-less playable interactive narrative. Play with the "),ds=d("a"),fs=f("Repl.it"),gs=f(" embedded below to get a sense of what it’s like to interact with a story organized into functions this way. Definitely check out the code as well to see how things are organized! If you’re interested in extending this example, you can "),ks=d("strong"),ms=f("fork"),ys=f(" it from "),ws=d("a"),vs=f("this link"),Es=f("."),$s=g(),a(bs.$$.fragment),Ts=g(),a(Ps.$$.fragment),xs=g(),a(Is.$$.fragment),Os=g(),Cs=d("h1"),Ss=f("Functions Mini-Projects"),Ds=g(),a(As.$$.fragment),Rs=g(),a(Ls.$$.fragment),Ns=g(),a(Ms.$$.fragment),Hs=g(),Ys=d("div"),Fs=d("div"),js=d("h3"),zs=f("OpenClass AI Practice Questions"),Bs=g(),Js=d("p"),Ws=f('If you would like some further practice with these concepts, click the button below to access free-response questions designed to help you master using "if" statements with Python.'),Gs=g(),Xs=d("div"),Us=d("a"),Vs=f("View Practice Questions"),Qs=g(),qs=d("h1"),Ks=f("Catalyzing Questions"),_s=g(),Zs=d("ul"),ea=d("li"),ta=f("What are some ways to help students organize complicated interactive narratives into scenes (especially away from the computer)?"),na=g(),sa=d("li"),aa=f("Can you think of any limitations the scene-as-function pattern creates for people creating stories?"),oa=g(),ra=d("li"),ca=f("How might you help students move away from linear Python programs toward programs decomposed into functions?"),ia=g(),pa=d("li"),ha=f("Are there other ways to engage students in decomposition outside of creating interactive narratives?"),la=g(),ua=d("div"),da=d("div"),fa=d("h3"),ga=f("Fill Out Our Survey!"),ka=g(),ma=d("p"),ya=f("We would love for you to fill out our "),wa=d("a"),va=f("survey"),Ea=f(". Hearing about your experiences will help us improve this tool and create better tools in the future to help people learn about computer science."),$a=g(),ba=d("div"),Ta=d("a"),Pa=f("Take the Survey"),xa=g(),Ia=d("h1"),Oa=f("Next Up…"),Ca=g(),Sa=d("p"),Da=f("In the next module, you’ll learn about designing interactive narratives, and will create one of your own. Click the button below to go to the next module!"),Aa=g(),Ra=d("div"),La=d("a"),Na=f("Go to Module 5"),Ma=g(),Ha=d("hr"),this.h()},l(e){t=k(e,"H1",{});var a=m(t);n=y(a,"Backstory"),a.forEach(w),s=v(e),c=k(e,"P",{});var r=m(c);i=y(r,"At this point, you know a lot about how to create interactive narratives. You may have even tried to create interactive stories using just "),u=k(r,"CODE",{});var p=m(u);P=y(p,"if"),p.forEach(w),x=y(r," statements, variables, and "),te=k(r,"CODE",{});var h=m(te);ne=y(h,"input()"),h.forEach(w),se=y(r,", which is great! It’s totally possible to create some amazing stories using just those simple tools. However, you might notice that things get pretty complicated pretty quickly. Consider the program below:"),r.forEach(w),ae=v(e),oe=k(e,"PRE",{class:!0}),m(oe).forEach(w),re=v(e),ce=k(e,"P",{});var l=m(ce);ie=y(l,"This is a pretty short story; it barely rises to the level of an interactive narrative at all! The problem is, if we try to add more to the story, the program gets pretty difficult to read and make changes to. For example, we might want to have the reader make another choice after they find the trap door. To accomplish this, you’d have to add another "),pe=k(l,"CODE",{});var d=m(pe);he=y(d,"if"),d.forEach(w),le=y(l," statement to the "),ue=k(l,"CODE",{});var f=m(ue);de=y(f,'"EXPLORE"'),f.forEach(w),fe=y(l," path:"),l.forEach(w),ge=v(e),ke=k(e,"PRE",{class:!0}),m(ke).forEach(w),me=v(e),ye=k(e,"P",{});var g=m(ye);we=y(g,"By nesting the "),ve=k(g,"CODE",{});var E=m(ve);Ee=y(E,"if"),E.forEach(w),$e=y(g," statements, we can create longer “branches” in the story. The problem is, the more nested "),be=k(g,"CODE",{});var $=m(be);Te=y($,"if"),$.forEach(w),Pe=y(g," statements we add, the more complicated the code becomes! We will eventually end up with a “diagonal” code pattern:"),g.forEach(w),xe=v(e),Ie=k(e,"PRE",{class:!0}),m(Ie).forEach(w),Oe=v(e),Ce=k(e,"P",{});var b=m(Ce);Se=y(b,"This sort of “diagonal” code is okay for beginners, but unless we figure out a different way to organize the code that makes up the story things will get too complicated and difficult to manage as we add to the story. Not to mention that nested "),De=k(b,"CODE",{});var T=m(De);Ae=y(T,"if"),T.forEach(w),Re=y(b," statements are a little confusing to read!"),b.forEach(w),Le=v(e),Ne=k(e,"P",{});var I=m(Ne);Me=y(I,"This module is about "),He=k(I,"STRONG",{});var O=m(He);Ye=y(O,"functions"),O.forEach(w),Fe=y(I,". We will use functions to solve the problem of nested "),je=k(I,"CODE",{});var C=m(je);ze=y(C,"if"),C.forEach(w),Be=y(I," statements in our interactive narratives. By creating functions, we can organize our story into "),Je=k(I,"EM",{});var S=m(Je);We=y(S,"scenes"),S.forEach(w),Ge=y(I,", allowing us to freely add new parts to the story without having to create many nested "),Xe=k(I,"CODE",{});var D=m(Xe);Ue=y(D,"if"),D.forEach(w),Ve=y(I," statements. This is the last coding concept you will need to learn in order to make interactive narratives with Python!"),I.forEach(w),Qe=v(e),qe=k(e,"H1",{});var A=m(qe);Ke=y(A,"Function Basics"),A.forEach(w),_e=v(e),Ze=k(e,"P",{});var R=m(Ze);et=k(R,"STRONG",{});var L=m(et);tt=y(L,"Functions"),L.forEach(w),nt=y(R," are really important in programming; they are "),st=k(R,"EM",{});var N=m(st);at=y(N,"power-words"),N.forEach(w),ot=y(R," that trigger a process. You’ve already been using some "),rt=k(R,"STRONG",{});var M=m(rt);ct=y(M,"functions"),M.forEach(w),it=y(R," in your programs; "),pt=k(R,"CODE",{});var H=m(pt);ht=y(H,"print()"),H.forEach(w),lt=y(R," is a function that triggers the process of showing text on the console, and "),ut=k(R,"CODE",{});var Y=m(ut);dt=y(Y,"input()"),Y.forEach(w),ft=y(R," is a function that triggers the process of pausing and waiting for the user to type something before continuing with the program."),R.forEach(w),gt=v(e),kt=k(e,"P",{});var F=m(kt);mt=y(F,"You can use Python to "),yt=k(F,"STRONG",{});var j=m(yt);wt=y(j,"define"),j.forEach(w),vt=y(F," your own "),Et=k(F,"STRONG",{});var z=m(Et);$t=y(z,"functions"),z.forEach(w),bt=y(F," instead of just using the ones built into the language. You can use functions to organize your code into "),Tt=k(F,"EM",{});var B=m(Tt);Pt=y(B,"processes"),B.forEach(w),xt=y(F," that you can trigger at different points in your program. There are just a couple of steps to do. Consider this program:"),F.forEach(w),It=v(e),Ot=k(e,"PRE",{class:!0}),m(Ot).forEach(w),Ct=v(e),St=k(e,"P",{});var J=m(St);Dt=y(J,"To demonstrate how "),At=k(J,"STRONG",{});var W=m(At);Rt=y(W,"functions"),W.forEach(w),Lt=y(J," work, I’m going to "),Nt=k(J,"EM",{});var G=m(Nt);Mt=y(G,"refactor"),G.forEach(w),Ht=y(J," this code so the lines corresponding to the song lyrics are organized into a function. Here’s how that works:"),J.forEach(w),Yt=v(e),o(Ft.$$.fragment,e),jt=v(e),o(zt.$$.fragment,e),Bt=v(e),o(Jt.$$.fragment,e),Wt=v(e),Gt=k(e,"H2",{});var X=m(Gt);Xt=y(X,"Why Functions?"),X.forEach(w),Ut=v(e),Vt=k(e,"P",{});var U=m(Vt);Qt=y(U,"You might be asking yourself–“Why would I add functions to my code? It seems like a needlessly complicated addition”. There are a lot of benefits to adding functions that might not be clear right away; the most obvious one is that we can "),qt=k(U,"EM",{});var V=m(qt);Kt=y(V,"call"),V.forEach(w),_t=y(U," functions as many times as we need to "),Zt=k(U,"EM",{});var Q=m(Zt);en=y(Q,"without"),Q.forEach(w),tn=y(U," rewriting the function definition. So if I wanted to repeat the "),nn=k(U,"CODE",{});var q=m(nn);sn=y(q,"song()"),q.forEach(w),an=y(U," code, I could do it by simply calling the "),on=k(U,"CODE",{});var K=m(on);rn=y(K,"song()"),K.forEach(w),cn=y(U," function a few more times:"),U.forEach(w),pn=v(e),hn=k(e,"PRE",{class:!0}),m(hn).forEach(w),ln=v(e),o(un.$$.fragment,e),dn=v(e),o(fn.$$.fragment,e),gn=v(e),kn=k(e,"H1",{});var _=m(kn);mn=y(_,"Using Functions for Scenes"),_.forEach(w),yn=v(e),wn=k(e,"P",{});var Z=m(wn);vn=y(Z,"So how could functions help with organizing interactive narratives? There are a lot of possible ways to use functions (they’re a pretty flexible programming tool), but one way is to create "),En=k(Z,"EM",{});var ee=m(En);$n=y(ee,"scenes"),ee.forEach(w),bn=y(Z," within functions, and then to chain those scenes together to weave the interactive narrative. “Scenes” aren’t Python concepts–they are a method of organization, a way of thinking about how to break down the problem of telling stories that have multiple paths toward multiple endings. A scene has:"),Z.forEach(w),Tn=v(e),Pn=k(e,"UL",{});var Jn=m(Pn);xn=k(Jn,"LI",{});var Ya=m(xn);In=y(Ya,"A description, where the reader learns about what is happening in that part of the story and what options they have for interacting with the narrative"),Ya.forEach(w),On=v(Jn),Cn=k(Jn,"LI",{});var Fa=m(Cn);Sn=y(Fa,"A choice, where the reader types in a command to interact with the story"),Fa.forEach(w),Dn=v(Jn),An=k(Jn,"LI",{});var ja=m(An);Rn=y(ja,"Two or more paths that lead to other scenes"),ja.forEach(w),Jn.forEach(w),Ln=v(e),Nn=k(e,"P",{});var za=m(Nn);Mn=y(za,"You can think about an interactive narrative not as a book with different endings that you read front-to-back, but as a network of “scenes” connected together. For example, here’s a network of scenes represented by a flowchart for the story of "),Hn=k(za,"EM",{});var Ba=m(Hn);Yn=y(Ba,"Jack and the Beanstalk"),Ba.forEach(w),Fn=y(za,":"),za.forEach(w),jn=v(e),zn=k(e,"DIV",{class:!0});var Ja=m(zn);Bn=k(Ja,"IMG",{alt:!0,src:!0,style:!0}),Ja.forEach(w),Wn=v(e),Gn=k(e,"P",{});var Wa=m(Gn);Xn=y(Wa,"To create this story using Python, you could make each “scene” its own function and connect them together through the reader’s choices. Here’s an example:"),Wa.forEach(w),Un=v(e),o(Vn.$$.fragment,e),Qn=v(e),o(qn.$$.fragment,e),Kn=v(e),o(_n.$$.fragment,e),Zn=v(e),o(es.$$.fragment,e),ts=v(e),ns=k(e,"P",{});var Ga=m(ns);ss=y(Ga,"To expand the story, all you have to do is add "),as=k(Ga,"CODE",{});var Xa=m(as);os=y(Xa,"if"),Xa.forEach(w),rs=y(Ga," statements to "),cs=k(Ga,"CODE",{});var Ua=m(cs);is=y(Ua,"scene2()"),Ua.forEach(w),ps=y(Ga," and "),hs=k(Ga,"CODE",{});var Va=m(hs);ls=y(Va,"scene3()"),Va.forEach(w),us=y(Ga,", along with more scenes to connect to. I’ve expanded the story I started above into a more-or-less playable interactive narrative. Play with the "),ds=k(Ga,"A",{href:!0,rel:!0});var Qa=m(ds);fs=y(Qa,"Repl.it"),Qa.forEach(w),gs=y(Ga," embedded below to get a sense of what it’s like to interact with a story organized into functions this way. Definitely check out the code as well to see how things are organized! If you’re interested in extending this example, you can "),ks=k(Ga,"STRONG",{});var qa=m(ks);ms=y(qa,"fork"),qa.forEach(w),ys=y(Ga," it from "),ws=k(Ga,"A",{href:!0,rel:!0});var Ka=m(ws);vs=y(Ka,"this link"),Ka.forEach(w),Es=y(Ga,"."),Ga.forEach(w),$s=v(e),o(bs.$$.fragment,e),Ts=v(e),o(Ps.$$.fragment,e),xs=v(e),o(Is.$$.fragment,e),Os=v(e),Cs=k(e,"H1",{});var _a=m(Cs);Ss=y(_a,"Functions Mini-Projects"),_a.forEach(w),Ds=v(e),o(As.$$.fragment,e),Rs=v(e),o(Ls.$$.fragment,e),Ns=v(e),o(Ms.$$.fragment,e),Hs=v(e),Ys=k(e,"DIV",{class:!0});var Za=m(Ys);Fs=k(Za,"DIV",{class:!0});var eo=m(Fs);js=k(eo,"H3",{});var to=m(js);zs=y(to,"OpenClass AI Practice Questions"),to.forEach(w),Bs=v(eo),Js=k(eo,"P",{});var no=m(Js);Ws=y(no,'If you would like some further practice with these concepts, click the button below to access free-response questions designed to help you master using "if" statements with Python.'),no.forEach(w),eo.forEach(w),Gs=v(Za),Xs=k(Za,"DIV",{class:!0});var so=m(Xs);Us=k(so,"A",{href:!0,class:!0});var ao=m(Us);Vs=y(ao,"View Practice Questions"),ao.forEach(w),so.forEach(w),Za.forEach(w),Qs=v(e),qs=k(e,"H1",{});var oo=m(qs);Ks=y(oo,"Catalyzing Questions"),oo.forEach(w),_s=v(e),Zs=k(e,"UL",{});var ro=m(Zs);ea=k(ro,"LI",{});var co=m(ea);ta=y(co,"What are some ways to help students organize complicated interactive narratives into scenes (especially away from the computer)?"),co.forEach(w),na=v(ro),sa=k(ro,"LI",{});var io=m(sa);aa=y(io,"Can you think of any limitations the scene-as-function pattern creates for people creating stories?"),io.forEach(w),oa=v(ro),ra=k(ro,"LI",{});var po=m(ra);ca=y(po,"How might you help students move away from linear Python programs toward programs decomposed into functions?"),po.forEach(w),ia=v(ro),pa=k(ro,"LI",{});var ho=m(pa);ha=y(ho,"Are there other ways to engage students in decomposition outside of creating interactive narratives?"),ho.forEach(w),ro.forEach(w),la=v(e),ua=k(e,"DIV",{class:!0});var lo=m(ua);da=k(lo,"DIV",{class:!0});var uo=m(da);fa=k(uo,"H3",{class:!0});var fo=m(fa);ga=y(fo,"Fill Out Our Survey!"),fo.forEach(w),ka=v(uo),ma=k(uo,"P",{class:!0});var go=m(ma);ya=y(go,"We would love for you to fill out our "),wa=k(go,"A",{href:!0});var ko=m(wa);va=y(ko,"survey"),ko.forEach(w),Ea=y(go,". Hearing about your experiences will help us improve this tool and create better tools in the future to help people learn about computer science."),go.forEach(w),uo.forEach(w),$a=v(lo),ba=k(lo,"DIV",{class:!0});var mo=m(ba);Ta=k(mo,"A",{class:!0,href:!0});var yo=m(Ta);Pa=y(yo,"Take the Survey"),yo.forEach(w),mo.forEach(w),lo.forEach(w),xa=v(e),Ia=k(e,"H1",{});var wo=m(Ia);Oa=y(wo,"Next Up…"),wo.forEach(w),Ca=v(e),Sa=k(e,"P",{});var vo=m(Sa);Da=y(vo,"In the next module, you’ll learn about designing interactive narratives, and will create one of your own. Click the button below to go to the next module!"),vo.forEach(w),Aa=v(e),Ra=k(e,"DIV",{class:!0});var Eo=m(Ra);La=k(Eo,"A",{href:!0,class:!0});var $o=m(La);Na=y($o,"Go to Module 5"),$o.forEach(w),Eo.forEach(w),Ma=v(e),Ha=k(e,"HR",{}),this.h()},h(){E(oe,"class","language-python"),E(ke,"class","language-python"),E(Ie,"class","language-python"),E(Ot,"class","language-python"),E(hn,"class","language-python"),E(Bn,"alt","A flowchart representing the plot of Jack and the Beanstalk, with additional paths included speculating as to how the story might go if Jack had made different decisions"),Bn.src!==(Jn=R)&&E(Bn,"src",Jn),$(Bn,"max-width","781px"),E(zn,"class","container has-text-centered m-5"),E(ds,"href","https://replit.com/~"),E(ds,"rel","nofollow"),E(ws,"href","https://replit.com/@JonStapleton1/Interactive-Narrative-Example"),E(ws,"rel","nofollow"),E(Fs,"class","card-content"),E(Us,"href","https://codeva.openclass.ai/resource/assignment-6103fe9829da09a31b3582c2?code=xfr60ikyW3mFAQ"),E(Us,"class","card-footer-item"),E(Xs,"class","card-footer"),E(Ys,"class","card my-5"),E(fa,"class","subtitle"),E(wa,"href","https://docs.google.com/forms/d/e/1FAIpQLSeTbspGwm1jX7BfuzwLa9H-h28VRP2sylI8qOdDQfmxu7ivyQ/viewform"),E(ma,"class","block"),E(da,"class","card-content"),E(Ta,"class","card-footer-item"),E(Ta,"href","https://docs.google.com/forms/d/e/1FAIpQLSeTbspGwm1jX7BfuzwLa9H-h28VRP2sylI8qOdDQfmxu7ivyQ/viewform"),E(ba,"class","card-footer"),E(ua,"class","card my-3"),E(La,"href",D+"/modules/module-5"),E(La,"class","button is-primary"),E(Ra,"class","container has-text-right")},m(e,a){b(e,t,a),T(t,n),b(e,s,a),b(e,c,a),T(c,i),T(c,u),T(u,P),T(c,x),T(c,te),T(te,ne),T(c,se),b(e,ae,a),b(e,oe,a),oe.innerHTML='<code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You see a dusty hallway ahead. Will you EXPLORE, or LISTEN?"</span><span class="token punctuation">)</span>\nanswer <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string">"EXPLORE"</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You find a trap door hidden beneath an old, moldy carpet."</span><span class="token punctuation">)</span>\n<span class="token keyword">elif</span> answer <span class="token operator">==</span> <span class="token string">"LISTEN"</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just hear the creaking of the old house"</span><span class="token punctuation">)</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"That\'s not an option"</span><span class="token punctuation">)</span></code>',b(e,re,a),b(e,ce,a),T(ce,ie),T(ce,pe),T(pe,he),T(ce,le),T(ce,ue),T(ue,de),T(ce,fe),b(e,ge,a),b(e,ke,a),ke.innerHTML='<code class="language-python"><span class="token comment"># ...</span>\n<span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string">"EXPLORE"</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You find a trap door hidden beneath an old, moldy carpet."</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Will you OPEN the door, or KNOCK?"</span><span class="token punctuation">)</span>\n    answer <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string">"OPEN"</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You see a dark passageway below."</span><span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> answer <span class="token operator">==</span> <span class="token string">"KNOCK"</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You hear someone approach the trapdoor..."</span><span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"That\'s not an option"</span><span class="token punctuation">)</span>\n<span class="token keyword">elif</span> answer <span class="token operator">==</span> <span class="token string">"LISTEN"</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just hear the creaking of the old house"</span><span class="token punctuation">)</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"That\'s not an option"</span><span class="token punctuation">)</span></code>',b(e,me,a),b(e,ye,a),T(ye,we),T(ye,ve),T(ve,Ee),T(ye,$e),T(ye,be),T(be,Te),T(ye,Pe),b(e,xe,a),b(e,Ie,a),Ie.innerHTML='<code class="language-python"><span class="token keyword">if</span> answer <span class="token operator">==</span><span class="token string">"A"</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">:</span>\n            <span class="token comment"># etc...</span></code>',b(e,Oe,a),b(e,Ce,a),T(Ce,Se),T(Ce,De),T(De,Ae),T(Ce,Re),b(e,Le,a),b(e,Ne,a),T(Ne,Me),T(Ne,He),T(He,Ye),T(Ne,Fe),T(Ne,je),T(je,ze),T(Ne,Be),T(Ne,Je),T(Je,We),T(Ne,Ge),T(Ne,Xe),T(Xe,Ue),T(Ne,Ve),b(e,Qe,a),b(e,qe,a),T(qe,Ke),b(e,_e,a),b(e,Ze,a),T(Ze,et),T(et,tt),T(Ze,nt),T(Ze,st),T(st,at),T(Ze,ot),T(Ze,rt),T(rt,ct),T(Ze,it),T(Ze,pt),T(pt,ht),T(Ze,lt),T(Ze,ut),T(ut,dt),T(Ze,ft),b(e,gt,a),b(e,kt,a),T(kt,mt),T(kt,yt),T(yt,wt),T(kt,vt),T(kt,Et),T(Et,$t),T(kt,bt),T(kt,Tt),T(Tt,Pt),T(kt,xt),b(e,It,a),b(e,Ot,a),Ot.innerHTML='<code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I\'m going to sing you a song!"</span><span class="token punctuation">)</span>\n\n<span class="token comment"># song lyrics</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is the song that doesn\'t end..."</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes it goes on and on my friend..."</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thanks for listening!"</span><span class="token punctuation">)</span></code>',b(e,Ct,a),b(e,St,a),T(St,Dt),T(St,At),T(At,Rt),T(St,Lt),T(St,Nt),T(Nt,Mt),T(St,Ht),b(e,Yt,a),r(Ft,e,a),b(e,jt,a),r(zt,e,a),b(e,Bt,a),r(Jt,e,a),b(e,Wt,a),b(e,Gt,a),T(Gt,Xt),b(e,Ut,a),b(e,Vt,a),T(Vt,Qt),T(Vt,qt),T(qt,Kt),T(Vt,_t),T(Vt,Zt),T(Zt,en),T(Vt,tn),T(Vt,nn),T(nn,sn),T(Vt,an),T(Vt,on),T(on,rn),T(Vt,cn),b(e,pn,a),b(e,hn,a),hn.innerHTML='<code class="language-python"><span class="token keyword">def</span> <span class="token function">song</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is the song that doesn\'t end..."</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes it goes on and on my friend..."</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I\'m going to sing you a song!"</span><span class="token punctuation">)</span>\nsong<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># activate the song() code!</span>\nsong<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># activate it again!</span>\nsong<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># and again...</span>\nsong<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># and again...</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thanks for listening!"</span><span class="token punctuation">)</span></code>',b(e,ln,a),r(un,e,a),b(e,dn,a),r(fn,e,a),b(e,gn,a),b(e,kn,a),T(kn,mn),b(e,yn,a),b(e,wn,a),T(wn,vn),T(wn,En),T(En,$n),T(wn,bn),b(e,Tn,a),b(e,Pn,a),T(Pn,xn),T(xn,In),T(Pn,On),T(Pn,Cn),T(Cn,Sn),T(Pn,Dn),T(Pn,An),T(An,Rn),b(e,Ln,a),b(e,Nn,a),T(Nn,Mn),T(Nn,Hn),T(Hn,Yn),T(Nn,Fn),b(e,jn,a),b(e,zn,a),T(zn,Bn),b(e,Wn,a),b(e,Gn,a),T(Gn,Xn),b(e,Un,a),r(Vn,e,a),b(e,Qn,a),r(qn,e,a),b(e,Kn,a),r(_n,e,a),b(e,Zn,a),r(es,e,a),b(e,ts,a),b(e,ns,a),T(ns,ss),T(ns,as),T(as,os),T(ns,rs),T(ns,cs),T(cs,is),T(ns,ps),T(ns,hs),T(hs,ls),T(ns,us),T(ns,ds),T(ds,fs),T(ns,gs),T(ns,ks),T(ks,ms),T(ns,ys),T(ns,ws),T(ws,vs),T(ns,Es),b(e,$s,a),r(bs,e,a),b(e,Ts,a),r(Ps,e,a),b(e,xs,a),r(Is,e,a),b(e,Os,a),b(e,Cs,a),T(Cs,Ss),b(e,Ds,a),r(As,e,a),b(e,Rs,a),r(Ls,e,a),b(e,Ns,a),r(Ms,e,a),b(e,Hs,a),b(e,Ys,a),T(Ys,Fs),T(Fs,js),T(js,zs),T(Fs,Bs),T(Fs,Js),T(Js,Ws),T(Ys,Gs),T(Ys,Xs),T(Xs,Us),T(Us,Vs),b(e,Qs,a),b(e,qs,a),T(qs,Ks),b(e,_s,a),b(e,Zs,a),T(Zs,ea),T(ea,ta),T(Zs,na),T(Zs,sa),T(sa,aa),T(Zs,oa),T(Zs,ra),T(ra,ca),T(Zs,ia),T(Zs,pa),T(pa,ha),b(e,la,a),b(e,ua,a),T(ua,da),T(da,fa),T(fa,ga),T(da,ka),T(da,ma),T(ma,ya),T(ma,wa),T(wa,va),T(ma,Ea),T(ua,$a),T(ua,ba),T(ba,Ta),T(Ta,Pa),b(e,xa,a),b(e,Ia,a),T(Ia,Oa),b(e,Ca,a),b(e,Sa,a),T(Sa,Da),b(e,Aa,a),b(e,Ra,a),T(Ra,La),T(La,Na),b(e,Ma,a),b(e,Ha,a),Ya=!0},p(e,t){const n={};2&t&&(n.$$scope={dirty:t,ctx:e}),Ft.$set(n);const s={};2&t&&(s.$$scope={dirty:t,ctx:e}),zt.$set(s);const a={};2&t&&(a.$$scope={dirty:t,ctx:e}),Jt.$set(a);const o={};2&t&&(o.$$scope={dirty:t,ctx:e}),un.$set(o);const r={};2&t&&(r.$$scope={dirty:t,ctx:e}),fn.$set(r);const c={};2&t&&(c.$$scope={dirty:t,ctx:e}),Vn.$set(c);const i={};2&t&&(i.$$scope={dirty:t,ctx:e}),qn.$set(i);const p={};2&t&&(p.$$scope={dirty:t,ctx:e}),_n.$set(p);const h={};2&t&&(h.$$scope={dirty:t,ctx:e}),es.$set(h);const l={};2&t&&(l.$$scope={dirty:t,ctx:e}),Ps.$set(l);const u={};2&t&&(u.$$scope={dirty:t,ctx:e}),Is.$set(u);const d={};2&t&&(d.$$scope={dirty:t,ctx:e}),As.$set(d);const f={};2&t&&(f.$$scope={dirty:t,ctx:e}),Ls.$set(f);const g={};2&t&&(g.$$scope={dirty:t,ctx:e}),Ms.$set(g)},i(e){Ya||(p(Ft.$$.fragment,e),p(zt.$$.fragment,e),p(Jt.$$.fragment,e),p(un.$$.fragment,e),p(fn.$$.fragment,e),p(Vn.$$.fragment,e),p(qn.$$.fragment,e),p(_n.$$.fragment,e),p(es.$$.fragment,e),p(bs.$$.fragment,e),p(Ps.$$.fragment,e),p(Is.$$.fragment,e),p(As.$$.fragment,e),p(Ls.$$.fragment,e),p(Ms.$$.fragment,e),Ya=!0)},o(e){h(Ft.$$.fragment,e),h(zt.$$.fragment,e),h(Jt.$$.fragment,e),h(un.$$.fragment,e),h(fn.$$.fragment,e),h(Vn.$$.fragment,e),h(qn.$$.fragment,e),h(_n.$$.fragment,e),h(es.$$.fragment,e),h(bs.$$.fragment,e),h(Ps.$$.fragment,e),h(Is.$$.fragment,e),h(As.$$.fragment,e),h(Ls.$$.fragment,e),h(Ms.$$.fragment,e),Ya=!1},d(e){e&&w(t),e&&w(s),e&&w(c),e&&w(ae),e&&w(oe),e&&w(re),e&&w(ce),e&&w(ge),e&&w(ke),e&&w(me),e&&w(ye),e&&w(xe),e&&w(Ie),e&&w(Oe),e&&w(Ce),e&&w(Le),e&&w(Ne),e&&w(Qe),e&&w(qe),e&&w(_e),e&&w(Ze),e&&w(gt),e&&w(kt),e&&w(It),e&&w(Ot),e&&w(Ct),e&&w(St),e&&w(Yt),l(Ft,e),e&&w(jt),l(zt,e),e&&w(Bt),l(Jt,e),e&&w(Wt),e&&w(Gt),e&&w(Ut),e&&w(Vt),e&&w(pn),e&&w(hn),e&&w(ln),l(un,e),e&&w(dn),l(fn,e),e&&w(gn),e&&w(kn),e&&w(yn),e&&w(wn),e&&w(Tn),e&&w(Pn),e&&w(Ln),e&&w(Nn),e&&w(jn),e&&w(zn),e&&w(Wn),e&&w(Gn),e&&w(Un),l(Vn,e),e&&w(Qn),l(qn,e),e&&w(Kn),l(_n,e),e&&w(Zn),l(es,e),e&&w(ts),e&&w(ns),e&&w($s),l(bs,e),e&&w(Ts),l(Ps,e),e&&w(xs),l(Is,e),e&&w(Os),e&&w(Cs),e&&w(Ds),l(As,e),e&&w(Rs),l(Ls,e),e&&w(Ns),l(Ms,e),e&&w(Hs),e&&w(Ys),e&&w(Qs),e&&w(qs),e&&w(_s),e&&w(Zs),e&&w(la),e&&w(ua),e&&w(xa),e&&w(Ia),e&&w(Ca),e&&w(Sa),e&&w(Aa),e&&w(Ra),e&&w(Ma),e&&w(Ha)}}}function ne(e){let t,n;const u=[e[0],se];let d={$$slots:{default:[te]},$$scope:{ctx:e}};for(let a=0;a<u.length;a+=1)d=s(d,u[a]);return t=new x({props:d}),{c(){a(t.$$.fragment)},l(e){o(t.$$.fragment,e)},m(e,s){r(t,e,s),n=!0},p(e,[n]){const s=1&n?c(u,[1&n&&i(e[0]),0&n&&i(se)]):{};2&n&&(s.$$scope={dirty:n,ctx:e}),t.$set(s)},i(e){n||(p(t.$$.fragment,e),n=!0)},o(e){h(t.$$.fragment,e),n=!1},d(e){l(t,e)}}}const se={title:"4. Organize",description:"Now that you know all about how to make interactive narratives, you might wonder how to make longer, more interesting stories. This module is all about how to organize your work with functions.",previous:"module-3",next:"module-5",layout:"module",video:"https://www.loom.com/embed/c1fc5a3266d54d19aea1c3daac91f695",activities:["💡 Basic Functions Experiments","💡 Functions as Scenes Experiments","🫑 Mild, Medium or Spicy Mini-Project"]};function ae(e,t,n){return e.$$set=e=>{n(0,t=s(s({},t),u(e)))},[t=u(t)]}export default class extends e{constructor(e){super(),t(this,e,ae,ne,n,{})}}export{se as metadata};
